name: Beta Releases

on:
  push:
    branches: ["fix/*", "feature/*"]
  pull_request:
    branches: ["fix/*", "feature/*"]

jobs:
  create-beta-release:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Install dpkg-dev
        run: |
          sudo apt-get update
          sudo apt-get install -y dpkg-dev debhelper-compat dh-golang golang-go devscripts

      - name: Bump Beta Version in debian/changelog
        id: bump_beta
        run: |
          # Parse the existing version
          CURRENT_VERSION=$(dpkg-parsechangelog --show-field Version)
          
          # If the current version is already a beta (e.g. 1.2.3~beta1-1ubuntu1),
          # we can increment the beta number. If it's not beta, we turn it into a beta1.
          # We'll do a simple parse here; adjust as needed for your version scheme.

          if [[ "$CURRENT_VERSION" =~ ^([0-9]+\.[0-9]+\.[0-9]+)~beta([0-9]+)(.*)$ ]]; then
            # It's already a beta
            BASE="${BASH_REMATCH[1]}"        # e.g. "1.2.3"
            BETA_NUMBER="${BASH_REMATCH[2]}" # e.g. "1"
            SUFFIX="${BASH_REMATCH[3]}"      # e.g. "-1ubuntu1"

            NEW_BETA=$(( BETA_NUMBER + 1 ))
            NEW_VERSION="${BASE}~beta${NEW_BETA}${SUFFIX}"
          else
            # Not a beta version, so let's turn it into beta1
            # If you have suffix like "-1ubuntu1", adapt as needed.
            # For simplicity, assume no trailing suffix here:
            NEW_VERSION="${CURRENT_VERSION}~beta1"
          fi

          echo "Bumping version from $CURRENT_VERSION to $NEW_VERSION"
          
          # Use dch (Debian ChangeLog) to create a new changelog entry
          # Note: '-l' sets a custom changelog file, but we can skip it if we use debian/changelog
          # '-v' sets the version, '-D' sets the dist, e.g. jammy, 'unstable', etc.
          # The message is the changelog entry summary.

          dch --newversion "$NEW_VERSION" \
              --distribution jammy \
              --force-bad-version \
              "Beta release $NEW_VERSION"

          # Let's output the new version for next steps
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Build .deb
        run: |
          # Now that changelog is updated with the new version, let's build.
          dpkg-buildpackage -us -uc
          # Move/copy .deb files to dist/
          mkdir -p dist
          mv ../kitchen_*.deb dist/ || true

      - name: Create Beta Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.NEW_VERSION }}
          release_name: "Beta Release ${{ env.NEW_VERSION }}"
          body: "This is a beta (pre-release) version for testing."
          prerelease: true
          draft: false
          files: "dist/*.deb"  # Attach built .deb
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Configure Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      - name: Commit and push updated changelog
        run: |
          git add debian/changelog
          git commit -m "chore: bump version in changelog"
          # By default, the checkout action gives you a detached HEAD,
          # so you need to push to the same ref you checked out.
          git push origin HEAD:${{ github.ref }}